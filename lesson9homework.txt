#create DynamoDB table

aws dynamodb create-table \
    --table-name MyTable \
    --attribute-definitions \
        AttributeName=UserId,AttributeType=S \
    --key-schema \
        AttributeName=UserId,KeyType=HASH \
    --provisioned-throughput \
        ReadCapacityUnits=5,WriteCapacityUnits=5


#delete table

aws dynamodb delete-table --table-name MyTable


#Create a file named hello_world_lambda.py 

nano hello_world_lambda.py
zip hello_world_lambda.zip hello_world_lambda.py

#create lambda function
aws lambda create-function    
--function-name hello-world     
--zip-file fileb://hello_world_lambda.zip     
--handler lambda_function.lambda_handler     
--runtime python3.8     
--role arn:aws:iam::730335231758:role/service-role/gglambda-role-m3q8n90e

#create api getway and integrate with lambda
aws apigateway create-rest-api --name "MyAPI"

aws apigateway create-resource 
--rest-api-id kex09jqjcl 
--parent-id f1uk9tvs3k  
--path-part "myresource"

aws apigateway put-method 
--rest-api-id kex09jqjcl 
--resource-id f1uk9tvs3k 
--http-method GET 
--authorization-type NONE

aws apigateway put-integration 
--rest-api-id kex09jqjcl 
--resource-id f1uk9tvs3k 
--http-method GET 
--type AWS 
--integration-http-method POST 
--uri "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:730335231758:function:hello-world/invocations"

aws apigateway put-method-response     
--rest-api-id kex09jqjcl     
--resource-id f1uk9tvs3k     
--http-method GET     
--status-code 200

aws apigateway put-integration-response 
--rest-api-id kex09jqjcl 
--resource-id f1uk9tvs3k 
--http-method GET 
--status-code 200 
--response-templates "{\"application/json\":\"\"}"

aws apigateway create-deployment --rest-api-id kex09jqjcl 











