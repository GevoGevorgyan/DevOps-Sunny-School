Create launch template with user data install nginx

aws ec2 create-launch-template     --launch-template-name gg-launch-template     --version-description "Initial version"     --launch-template-data '{
        "InstanceType": "t2.micro",
        "UserData": "IyEvYmluL2Jhc2gKYXB0LWdldCB1cGRhdGUKYXB0LWdldCBpbnN0YWxsIC15IG5naW54CnN5c3RlbWN0bCBzdGFydCBuZ2lueA==",
        "ImageId": "ami-0440d3b780d96b29d"
    }'

create autoscaling group

aws autoscaling create-auto-scaling-group
 --auto-scaling-group-name gg-asg
 --launch-template "LaunchTemplateName=gg-launch-template,Version=1"
 --min-size 1 --max-size 3
 --desired-capacity 1
 --vpc-zone-identifier "subnet-03d6c24170a8b8dc1"

create target group

aws elbv2 create-target-group
 --name gg-target-group
 --protocol HTTP
 --port 80
 --vpc-id vpc-0799504f6df9624a0

create alb 

aws elbv2 create-load-balancer
 --name gg-alb
 --subnets  subnet-0e7d2aee4619a71ec, subnet-05ae843871970938d
 --security-groups sg-05f74155cfabbf8ba
 --scheme internet-facing
 --type application
  

create s3 bucket enable versioning

aws s3api create-bucket --bucket gevogevorgyan-s3 --region us-east-1
aws s3api put-bucket-versioning --bucket gevogevorgyan-s3 --versioning-configurati>

upload file in s3

aws s3 cp hwork.txt s3://gevogevorgyan-s3

create rds

aws rds create-db-instance \
    --db-instance-identifier gg-db \
    --db-instance-class db.t2.micro \
    --engine mysql \
    --allocated-storage 20 \
    --db-name ggdb \
    --master-username admin \
    --master-user-password 12345678 \
    --vpc-security-group-ids sg-0289fd511afdd562f \
    --storage-type gp2 \
    --no-multi-az \
    --no-publicly-accessible \
    --enable-cloudwatch-logs-exports '["error","general","slowquery","audit"]' \
    --backup-retention-period 7 \
    --db-subnet-group-name default-vpc-0799504f6df9624a0 \
    --tags Key=Name,Value=gg-db

